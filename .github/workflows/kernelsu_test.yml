name: KernelSU Development Build (Galaxy M30S)

on:
  workflow_dispatch:
  push:

jobs:
  notify:
    name: Build Notification
    runs-on: ubuntu-latest
    steps:
      - name: Send build message to Telegram
        uses: appleboy/telegram-action@master
        env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_CHAT_ID }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: "üõ†Ô∏è Build Started for KernelSU üë∑"    
 
  failure-notification:
    name: Failure Notification
    needs: [build-kernelsu]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send failure message to Telegram
        uses: appleboy/telegram-action@master
        env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_CHAT_ID }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: "üõë Build failed for KernelSU üòû"   

  build-kernelsu:
    name: Build KernelSU
    runs-on: ubuntu-latest

    strategy:
      matrix:
        variant: [aosp]
        enforcing: [p]
        android: [12]
        device: [m30s]

      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          submodules: true

      - uses: szenius/set-timezone@v1.0
        with:
          timezone: "Asia/Kolkata"

      - name: Export build branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: branch_name

      - name: Update Debian/Ubuntu Repositories
        run: sudo apt-get update

      - name: Install Debian/Ubuntu dependencies
        run: |
          sudo apt install bzip2 lib32stdc++6 libc6-dev-i386 libncurses5 jq bison flex libssl-dev python3 python-is-python3 libarchive-tools -y
          mkdir -p toolchain
          cd toolchain
          echo 'Download antman and sync'
          bash <(curl -s "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman") -S=05012024
          echo 'Patch for glibc'
          bash <(curl -s "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman") --patch=glibc
          echo 'Done'
     
      - name: Setup KernelSU
        run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          cd KernelSU
          echo "KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))" >> $GITHUB_ENV
          cd -

      - name: Build Mint kernel
        id: build-kernel
        run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          if [[ "${{ matrix.enforcing }}" == "e" ]]; then
            ./build.sh --kernelsu --automated --device ${{ matrix.device }} --variant ${{ matrix.variant }} --android ${{ matrix.android }}
          elif [[ "${{ matrix.enforcing }}" == "p" ]]; then
            ./build.sh --kernelsu --automated --device ${{ matrix.device }} --variant ${{ matrix.variant }} --android ${{ matrix.android }} --permissive
          fi

      - name: Prepare release package
        run: |
          mkdir -p ./release
          mv Mint*.zip ./release/

      - name: Prepare build config artifact
        run: |
          cp .config ./release/kernel_config_a50_${{ matrix.variant }}-s-k-${{ matrix.enforcing }}.txt

      - name: Upload build to Telegram
        uses: appleboy/telegram-action@master
        env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_CHAT_ID }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: " "
          document: ./release/*.zip

  ksumanager:
    name: Download ksu latest manager
    needs: [build-kernelsu]
    runs-on: ubuntu-latest
    steps:
     - name: Download ksu latest manager
       id: download-artifact
       uses: dawidd6/action-download-artifact@v2
       with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build-manager.yml
          workflow_conclusion: completed
          branch: main
          event: push
          name: manager
          name_is_regexp: true
          path: ./tmp/
          repo: tiann/KernelSU
          check_artifacts: false
          search_artifacts: false
          skip_unpack: false
          if_no_artifact_found: fail
       
     - name: Upload Manager to Telegram
       uses: appleboy/telegram-action@master
       env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_CHAT_ID }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
       with:
         to: ${{ secrets.TELEGRAM_CHAT_ID }}
         token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
         message: "Manager"
         document: ./tmp/manager/*.apk
         if-no-files-found: error

